
# =============================================================================
# InkAI Studio - Comprehensive CI/CD Pipeline
# =============================================================================
# This workflow implements a complete CI/CD pipeline with:
# - Multi-platform matrix builds
# - Security and quality checks
# - Automated deployments
# - Backup and synchronization
# - Comprehensive notifications
# =============================================================================

name: "InkAI Studio CI/CD Pipeline"

# =============================================================================
# WORKFLOW TRIGGERS
# =============================================================================
on:
  # Trigger on pushes to main branches
  push:
    branches: 
      - main
      - master
      - develop
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  
  # Trigger on pull requests to main branches
  pull_request:
    branches: 
      - main
      - master
      - develop
    types: [opened, synchronize, reopened, ready_for_review]
  
  # Scheduled runs for maintenance tasks
  schedule:
    # Run daily at 2 AM UTC for maintenance
    - cron: '0 2 * * *'
    # Run weekly on Sundays at 4 AM UTC for comprehensive checks
    - cron: '0 4 * * 0'
  
  # Manual trigger with input options
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

# =============================================================================
# GLOBAL ENVIRONMENT VARIABLES
# =============================================================================
env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '17'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'inkau-studio'
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

# =============================================================================
# CONCURRENCY CONTROL
# =============================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# =============================================================================
# WORKFLOW JOBS
# =============================================================================
jobs:
  # ===========================================================================
  # JOB: Initial Setup and Validation
  # ===========================================================================
  setup:
    name: "Setup and Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Validate Workflow Configuration"
        run: |
          echo "::group::Workflow Validation"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "::endgroup::"
      
      - name: "Check Deployment Conditions"
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi
      
      - name: "Generate Version"
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="pr-${{ github.event.number }}-$(echo ${{ github.sha }} | cut -c1-8)"
          else
            VERSION="$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-8)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  # ===========================================================================
  # JOB: Security and Quality Checks
  # ===========================================================================
  security-scan:
    name: "Security & Quality Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup
    
    strategy:
      matrix:
        scan-type: ['dependencies', 'code', 'secrets', 'container']
      fail-fast: false
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: "Dependency Vulnerability Scan"
        if: matrix.scan-type == 'dependencies'
        run: |
          echo "::group::Dependency Scan"
          npm audit --audit-level high
          npx audit-ci --config .audit-ci.json || true
          echo "::endgroup::"
      
      - name: "Code Quality Analysis"
        if: matrix.scan-type == 'code'
        run: |
          echo "::group::ESLint Analysis"
          npm ci
          npm run lint -- --format=json --output-file=eslint-report.json || true
          echo "::endgroup::"
      
      - name: "Secret Detection"
        if: matrix.scan-type == 'secrets'
        uses: trufflesecurity/trufflehog@v3.63.2
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: "Container Security Scan"
        if: matrix.scan-type == 'container'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: "Upload Security Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results-${{ matrix.scan-type }}
          path: |
            *.json
            *.sarif
            *.log
          retention-days: 30

  # ===========================================================================
  # JOB: Multi-Platform Build Matrix
  # ===========================================================================
  build:
    name: "Build (${{ matrix.platform }}-${{ matrix.component }})"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: [setup, security-scan]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        component: ['frontend', 'backend', 'mobile']
        platform: ['web', 'ios', 'android']
        exclude:
          # Exclude invalid combinations
          - component: 'frontend'
            platform: 'ios'
          - component: 'frontend'
            platform: 'android'
          - component: 'backend'
            platform: 'ios'
          - component: 'backend'
            platform: 'android'
          - component: 'mobile'
            platform: 'web'
          - os: 'windows-latest'
            platform: 'ios'
          - os: 'ubuntu-latest'
            platform: 'ios'
      fail-fast: false
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: "Setup Build Environment"
        uses: ./.github/actions/setup-environment
        with:
          component: ${{ matrix.component }}
          platform: ${{ matrix.platform }}
          node-version: ${{ env.NODE_VERSION }}
      
      - name: "Cache Dependencies"
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache
            node_modules
            */node_modules
          key: ${{ runner.os }}-${{ matrix.component }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.component }}-
            ${{ runner.os }}-
      
      - name: "Install Dependencies"
        run: |
          echo "::group::Installing Dependencies for ${{ matrix.component }}"
          if [[ "${{ matrix.component }}" == "frontend" ]]; then
            npm ci --production=false
          elif [[ "${{ matrix.component }}" == "backend" ]]; then
            cd backend && npm ci --production=false
          elif [[ "${{ matrix.component }}" == "mobile" ]]; then
            cd mobile && npm ci --production=false
          fi
          echo "::endgroup::"
      
      - name: "Run Tests"
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "::group::Running Tests for ${{ matrix.component }}"
          case "${{ matrix.component }}" in
            "frontend")
              npm run test -- --coverage --watchAll=false
              ;;
            "backend")
              cd backend && npm run test -- --coverage
              ;;
            "mobile")
              cd mobile && npm run test
              ;;
          esac
          echo "::endgroup::"
      
      - name: "Build Application"
        run: |
          echo "::group::Building ${{ matrix.component }} for ${{ matrix.platform }}"
          case "${{ matrix.component }}" in
            "frontend")
              npm run build
              ;;
            "backend")
              cd backend && npm run build
              ;;
            "mobile")
              cd mobile && npm run build:${{ matrix.platform }}
              ;;
          esac
          echo "::endgroup::"
      
      - name: "Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.component }}-${{ matrix.platform }}-${{ runner.os }}
          path: |
            dist/
            build/
            *.apk
            *.ipa
            *.exe
          retention-days: 7

  # ===========================================================================
  # JOB: Integration Tests
  # ===========================================================================
  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]
    if: github.event.inputs.skip_tests != 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
      
      - name: "Download Build Artifacts"
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true
      
      - name: "Setup Test Environment"
        run: |
          echo "::group::Setting up integration test environment"
          docker-compose -f docker-compose.test.yml up -d --wait
          echo "::endgroup::"
      
      - name: "Run Integration Tests"
        run: |
          echo "::group::Running integration tests"
          npm run test:integration -- --verbose
          echo "::endgroup::"
      
      - name: "Run E2E Tests"
        uses: cypress-io/github-action@v6
        with:
          start: npm run start:test
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          record: true
          parallel: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Upload Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            cypress/screenshots/
            cypress/videos/
            test-results.xml
            coverage/
          retention-days: 14

  # ===========================================================================
  # JOB: Docker Build and Push
  # ===========================================================================
  docker-build:
    name: "Docker Build & Push"
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [build, integration-tests]
    if: needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
      
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
      
      - name: "Login to Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.setup.outputs.version }}
      
      - name: "Build and Push Docker Image"
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.setup.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # ===========================================================================
  # JOB: Backup and Synchronization
  # ===========================================================================
  backup-sync:
    name: "Backup & Sync"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
      
      - name: "Setup AWS CLI"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: "Database Backup"
        run: |
          echo "::group::Creating database backup"
          pg_dump ${{ secrets.DATABASE_URL }} > backup-$(date +%Y%m%d-%H%M%S).sql
          aws s3 cp backup-*.sql s3://${{ secrets.BACKUP_BUCKET }}/database/
          echo "::endgroup::"
      
      - name: "File Storage Backup"
        run: |
          echo "::group::Syncing file storage"
          aws s3 sync s3://${{ secrets.STORAGE_BUCKET }}/ s3://${{ secrets.BACKUP_BUCKET }}/storage/ --delete
          echo "::endgroup::"
      
      - name: "Configuration Backup"
        run: |
          echo "::group::Backing up configurations"
          kubectl get configmaps -o yaml > configmaps-backup.yaml
          kubectl get secrets -o yaml > secrets-backup.yaml
          aws s3 cp configmaps-backup.yaml s3://${{ secrets.BACKUP_BUCKET }}/config/
          aws s3 cp secrets-backup.yaml s3://${{ secrets.BACKUP_BUCKET }}/config/
          echo "::endgroup::"

  # ===========================================================================
  # JOB: Deployment
  # ===========================================================================
  deploy:
    name: "Deploy to ${{ needs.setup.outputs.environment }}"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [setup, docker-build]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
      
      - name: "Setup Kubectl"
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: "Configure Kubernetes"
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          kubectl config current-context
      
      - name: "Deploy to Kubernetes"
        id: deploy
        run: |
          echo "::group::Deploying to ${{ needs.setup.outputs.environment }}"
          
          # Update deployment with new image
          kubectl set image deployment/inkau-studio-app \
            app=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.version }} \
            -n ${{ needs.setup.outputs.environment }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/inkau-studio-app -n ${{ needs.setup.outputs.environment }} --timeout=600s
          
          # Get service URL
          SERVICE_URL=$(kubectl get service inkau-studio-service -n ${{ needs.setup.outputs.environment }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=https://$SERVICE_URL" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
      
      - name: "Run Smoke Tests"
        run: |
          echo "::group::Running smoke tests"
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
          curl -f ${{ steps.deploy.outputs.url }}/api/status || exit 1
          echo "::endgroup::"
      
      - name: "Update Deployment Status"
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Deployment to ${{ needs.setup.outputs.environment }} successful"
          else
            echo "❌ Deployment to ${{ needs.setup.outputs.environment }} failed"
            exit 1
          fi

  # ===========================================================================
  # JOB: Performance Testing
  # ===========================================================================
  performance-test:
    name: "Performance Testing"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [deploy]
    if: needs.setup.outputs.environment == 'staging'
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
      
      - name: "Setup K6"
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: "Run Load Tests"
        run: |
          echo "::group::Running load tests"
          k6 run --out json=load-test-results.json tests/performance/load-test.js
          echo "::endgroup::"
      
      - name: "Run Lighthouse Audit"
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy.outputs.url }}
            ${{ needs.deploy.outputs.url }}/gallery
            ${{ needs.deploy.outputs.url }}/pricing
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ===========================================================================
  # JOB: Notification and Reporting
  # ===========================================================================
  notify:
    name: "Notifications & Reporting"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup, security-scan, build, integration-tests, deploy, performance-test]
    if: always()
    
    steps:
      - name: "Generate Report"
        id: report
        run: |
          echo "::group::Generating workflow report"
          
          # Determine overall status
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            STATUS="❌ FAILURE"
            COLOR="danger"
          else
            STATUS="⚠️ PARTIAL"
            COLOR="warning"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          
          # Create summary
          cat << EOF > summary.md
          # InkAI Studio CI/CD Report
          
          **Status**: $STATUS
          **Version**: ${{ needs.setup.outputs.version }}
          **Environment**: ${{ needs.setup.outputs.environment }}
          **Triggered by**: ${{ github.actor }}
          
          ## Job Results
          - Security Scan: ${{ needs.security-scan.result }}
          - Build: ${{ needs.build.result }}
          - Integration Tests: ${{ needs.integration-tests.result }}
          - Deployment: ${{ needs.deploy.result }}
          - Performance Tests: ${{ needs.performance-test.result }}
          
          ## Links
          - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          EOF
          
          echo "::endgroup::"
      
      - name: "Slack Notification"
        if: env.SLACK_WEBHOOK != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "InkAI Studio CI/CD Pipeline ${{ steps.report.outputs.status }}",
              "attachments": [
                {
                  "color": "${{ steps.report.outputs.color }}",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ needs.setup.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "${{ needs.setup.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Triggered by",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Workflow",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK }}
      
      - name: "Discord Notification"
        if: env.DISCORD_WEBHOOK != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "InkAI Studio CI/CD Pipeline",
                   "description": "${{ steps.report.outputs.status }}",
                   "color": 3066993,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Version", "value": "${{ needs.setup.outputs.version }}", "inline": true},
                     {"name": "Environment", "value": "${{ needs.setup.outputs.environment }}", "inline": true}
                   ],
                   "footer": {"text": "GitHub Actions"},
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                 }]
               }' \
               ${{ env.DISCORD_WEBHOOK }}
      
      - name: "Email Notification"
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ InkAI Studio CI/CD Pipeline Failed"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: "noreply@inkau-studio.com"
          body: |
            The CI/CD pipeline for InkAI Studio has failed.
            
            Details:
            - Repository: ${{ github.repository }}
            - Branch: ${{ github.ref }}
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}
            
            Please check the workflow run for details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

# =============================================================================
# SUCCESS CRITERIA AND VALIDATION
# =============================================================================
# 1. All security scans pass without critical vulnerabilities
# 2. Build artifacts are generated for all platforms
# 3. Test coverage remains above 80%
# 4. Integration tests pass with 100% success rate
# 5. Docker images are built and pushed successfully
# 6. Deployment completes without errors
# 7. Smoke tests validate application health
# 8. Performance tests meet defined thresholds
# 9. Notifications are sent to all configured channels
# 10. Backup operations complete successfully (scheduled runs)
# =============================================================================
